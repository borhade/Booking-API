1)go mod init folder-name(go mod init Booking-API)
2)create one file and give name main.go
3)give package name i.e package main

Youtube channel:
https://www.youtube.com/@Go-Guruji/videos

-------------------------------------------------------------
1)Panic , recover and defer

func main() {
	fmt.Println("hi my name is vishal")
	SlicePanic()
	fmt.Println("hi my name is borhade")
}

func SlicePanic() {
	defer HandlePanic()
	res := []int{1, 2, 3}
	fmt.Println("len", res[3])
	//defer HandlePanic()
	//panic("divison by zero")
}

func HandlePanic() {
	r := recover()
	if r != nil {
		fmt.Println("Handle Panic", r)
	}
}

--------------------------Error Handle go-----------

package main

import (
	"fmt"
)

/*type Rectangle struct {
	height int
		width  int
}

type MathOperation interface {
	Add(a, b int) int
	Area(a, b int) int
}

func (r Rectangle) Add(a, b int) int {
	res := r.height + r.width + a + b
	return res
}
func (r Rectangle) Area(a, b int) int {
	res := r.height * r.width * a * b
	return res
}*/

type CustomError struct {
	errorMessage string
}

func (err *CustomError) Error() string {
	return err.errorMessage
}

func main() {
	a := 2
	b := 3
	res, err := SumOfDigit(a, b)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println("my name is vishal", res)
}

func SumOfDigit(a, b int) (int, error) {

	if b > a {
		return 0, &CustomError{errorMessage: "test"}
	}
	sum := a + b
	return sum, nil
	//defer HandlePanic()
	//panic("divison by zero")
}

func HandlePanic() {
	r := recover()
	if r != nil {
		fmt.Println("Handle Panic", r)
	}
}

-------------------------------------Why we need point -----------------

pointer basically better for memory allocation
mean create one varible and their value and access from anywhere using different variable

i.e

x :=6

p:=&x
b:=&x
------------------------------student struct --------------
type Student struct {
	Id    int    `json:"Id"`
	Name  string `json:"Name"`
	Posts []StudentPost
}

type StudentPost struct {
	PostId   int    `json:"PostId"`
	PostName string `json:"PostName"`
	Comments string `json:"Comments"`
}

func main() {

	var data []StudentPost
	data = append(data, StudentPost{PostId: 234, PostName: "vishal borhade", Comments: "This is vishal and i am learning go lang"})
	data = append(data, StudentPost{PostId: 124, PostName: "shivani thankar", Comments: "vishal.."})

	for _, value := range data {
		fmt.Println(value.PostId)
	}

	//fmt.Println(data)
	//b := 300
	//fmt.Println("address of a ", &a)
	//fmt.Println("address of a ", &b)
	//SumOfDigit(&a)
	//fmt.Println("after function address of a ", a)
	//fmt.Println("address of a ", b)
}

----------------------------------------------json unmarshal --------------

n Go, you can unmarshal (decode) data from a serialized format, such as JSON, XML, or other data formats, into a Go data structure. The encoding/json package is commonly used for unmarshaling JSON data. 
Here's how to unmarshal data from a JSON string into a Go struct:

-------------------------------------------map struct-------------
data := make([]map[int]string, 0)
	for i := 0; i < 5; i++ {
		test := map[int]string{
			i: fmt.Sprintf("Alice is:%d", i),
		}
		data = append(data, test)
	}
------------------------------select statment with channel data--------------

In Go, the select statement is used to wait on multiple channel operations and 
perform different actions depending on which channel is ready to proceed.
 It's a powerful tool for managing concurrent operations. Here's a simple example of how to use select:

 example:


func main() {
	ch1 := make(chan int)
	ch2 := make(chan string)
	go second(ch2)
	go first(ch1)

	fmt.Println("hi this gorutine in goalng")
	select {
	case val1 := <-ch1:
		fmt.Println("Yes I am execute", val1)
	case val2 := <-ch2:
		fmt.Println("I am second", val2)
		//default:
		//fmt.Println("Yes I am default case")
	}

	//b := 300
	//fmt.Println("address of a ", &a)
	//fmt.Println("address of a ", &b)
	//SumOfDigit(&a)
	//fmt.Println("after function address of a ", a)
	//fmt.Println("address of a ", b)
}

func first(ch1 chan int) {
	time.Sleep(4 * time.Second)
	ch1 <- 23
	//fmt.Println("My name is vishal")\
	//fmt.Println("address of a...", *a)
}

func second(ch2 chan string) {
	time.Sleep(2 * time.Second)
	ch2 <- "Hello, Go!"
}
 In this example, we have two goroutines sending data on two different channels, 
 ch1 and ch2. The select statement waits for data to be received on either channel and then executes the corresponding case. Here's what happens:

The first goroutine sends the integer value 42 on ch1 after a 2-second delay.
The second goroutine sends the string "Hello, Go!" on ch2 after a 1-second delay.
The select statement waits for data from either channel. Whichever channel 
provides data first will have its associated case executed. In this case, ch2 is
 the first to provide data, so the message "Received from ch2: Hello, Go!" is printed.
 -----------------------------------------------------------



 Goroutines are a fundamental and powerful feature in Go that enables concurrent execution and makes it easier to write efficient and highly responsive programs. They play a crucial role in Go's approach to concurrent programming, and their importance can be illustrated through various use cases:

1. **Efficient Parallelism:**
   Goroutines allow you to achieve parallelism in your Go programs without the complexity of managing low-level threads or processes. You can run multiple goroutines concurrently, taking full advantage of multi-core processors, which can significantly improve the performance of CPU-bound tasks.

   **Use Case**: Parallelize computationally intensive tasks, such as data processing, mathematical computations, or image rendering, to take advantage of multi-core processors and reduce execution time.

2. **Concurrency and Scalability:**
   Goroutines are lightweight, and it's common to have thousands or even tens of thousands of them running simultaneously in a single Go program. This concurrency model makes it easy to handle a high number of concurrent connections and requests, which is crucial for building scalable networked applications.

   **Use Case**: Building scalable web servers, proxy servers, or microservices that can handle many concurrent client connections efficiently.

3. **Concurrent I/O Operations:**
   Goroutines are well-suited for managing I/O-bound operations, such as reading from and writing to files, network communication, and database access. They allow you to perform I/O operations concurrently without blocking the execution of your program.

   **Use Case**: Implementing network services, file processing, and database interactions where multiple I/O operations can be performed simultaneously.

4. **Responsive User Interfaces:**
   In graphical user interfaces (GUI) and other interactive applications, goroutines enable you to keep the user interface responsive while performing background tasks. This is achieved by running time-consuming operations in separate goroutines, allowing the main UI thread to remain interactive.

   **Use Case**: Developing desktop applications, web applications, or games that need to maintain a responsive user interface while handling background tasks like data retrieval or computation.

5. **Asynchronous Programming:**
   Goroutines simplify asynchronous programming by allowing you to spawn concurrent tasks that can run independently and communicate through channels. This makes it easier to manage asynchronous workflows and event-driven programming.

   **Use Case**: Handling asynchronous events, such as event-driven server applications, real-time data processing, or message passing systems.

6. **Resource Management:**
   Goroutines are used for managing shared resources or implementing critical sections safely. Go's built-in synchronization primitives, like channels, mutexes, and atomic operations, allow goroutines to coordinate and communicate in a thread-safe manner.

   **Use Case**: Implementing safe resource sharing, such as connection pools, caches, or data structures accessed by multiple goroutines.

7. **Graceful Shutdown and Cleanup:**
   Goroutines play a role in graceful application shutdown and cleanup. They can be designed to respond to cancelation signals and perform cleanup tasks before exiting.

   **Use Case**: Ensuring that resources are released, and data is saved correctly when an application is shut down, preventing data corruption or resource leaks.

Goroutines make concurrent programming more accessible and less error-prone by abstracting away the complexity of managing threads and synchronization. They allow developers to focus on writing clear, maintainable, and efficient code while building scalable and responsive software. This ease of use, combined with the built-in features of Go, makes goroutines 
a fundamental and important feature of the language.

-----------------------------------------Reverse Number -------------

data := []int{1, 2, 3}
	res := make([]int, 0)
	total := len(data) - 1
	for i := total; i >= 0; i-- {
		fmt.Println(data[i])
		res = append(res, data[i])
	}
	fmt.Println(res)

	------------------------------Mutex----------

	https://www.youtube.com/watch?v=GrgoMUnLs6E&ab_channel=JamesCutajar
	1)mutex basically use for handle deadlock
	2)add synchronization in goroutine
	3)mutex use lock mechanism for thread
	4)with mutext we ensure that only thread update value.
	


----------------------------------------Clousre----------------------------------------------
func OuterFunction() func() int {
	fmt.Println("Outer function..")
	x := 0
	return func() int {
		fmt.Println("Inner function...")
		x++
		return x
	}
}

func main() {
	iterate := func() func() int {
		i := 0
		return func() int {
			i++
			return i
		}
	}

	//increment := OuterFunction()
	increment := iterate()
	//fmt.Println(increment())
	//fmt.Println(increment())
	for j := 0; j < 5; j++ {
		fmt.Println(increment())
	}
	//fmt.Println(iterate)
	//fmt.Println(increment()) // Output: 1
	//fmt.Println(increment()) // Output: 1
	//fmt.Println(res())


